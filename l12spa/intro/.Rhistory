pilot$wunit1[pilot$wunit1=="人大机关行政管理处"] = "人大委"
pilot$wunit1[pilot$wunit1=="人大民宗侨务工委"] = "人大委"
pilot$wunit1[pilot$wunit1=="人大法制工委"] = "人大委"
pilot$wunit1[pilot$wunit1=="人大财经工委"] = "人大委"
pilot$wunit1[pilot$wunit1=="人大研究室"] = "人大研"
pilot$wunit1[pilot$wunit1=="政协人口委员会"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协医卫体育委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协城乡建设委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协学习委员会"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协学习文史委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协提案委员会"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协教卫文体委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协文史委员会"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协海外联络委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协港澳台侨委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协社会法制委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协科技委员会"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协经济委员会"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协经济科技委"] = "政协委"
pilot$wunit1[pilot$wunit1=="政协统一联谊委"] = "政协委"
pilot$wunit1[pilot$wunit1=="乡镇企业局"] = "乡镇局"
pilot <- subset(pilot, sector_type == "人大" | sector_type == "党委" | sector_type == "政协"
| sector_type == "政府" | sector_type == "法院检察院" | sector_type == "团体组织")
pilot <- subset(pilot, wunit1 == "交通局" |  wunit1 == "人事局" |  wunit1 == "人计委" | wunit1 == "体育局" |  wunit1 == "供电局"
| wunit1 == "供销社" |  wunit1 == "保密局" | wunit1 == "党史办" | wunit1 == "党政研" | wunit1 == "工商联"
| wunit1 == "妇联" | wunit1 == "总工会" | wunit1 == "共青团" | wunit1 == "科协" | wunit1 == "社科联"
| wunit1 == "侨联" | wunit1 == "规划局" | wunit1 == "编制办" | wunit1 == "财贸办"| wunit1 == "信访办"
|  wunit1 == "党委办" |  wunit1 == "公安局" |  wunit1 == "农工部"
| wunit1 == "农业局" |  wunit1 == "农经委" |  wunit1 == "劳社局" |  wunit1 == "卫生局"
|  wunit1 == "发改委" |  wunit1 == "司法局" |  wunit1 == "商业局" | wunit1 == "商务局" |  wunit1 == "国土局"
|  wunit1 == "国税局" |  wunit1 == "地税局" | wunit1 == "地震局" |  wunit1 == "城管局" |  wunit1 == "外办"
|  wunit1 == "多管局" | wunit1 == "审计局" |  wunit1 == "宣传部" |  wunit1 == "工商局" | wunit1 == "市委"
|  wunit1 == "市政府" |  wunit1 == "广电局" | wunit1 == "建设局" |  wunit1 == "政府办" |  wunit1 == "政法委"
| wunit1 == "教育局" |  wunit1 == "文化局" |  wunit1 == "机关委" |  wunit1 == "档案局" | wunit1 == "检察院"
|  wunit1 == "民政局" |  wunit1 == "气象局" |  wunit1 == "水利局" | wunit1 == "法制办" |  wunit1 == "法院"
|  wunit1 == "专卖局" |  wunit1 == "物价局" |  wunit1 == "环保局" |  wunit1 == "电信局" |  wunit1 == "监察局"
| wunit1 == "科技局" |  wunit1 == "粮食局" |  wunit1 == "纪检委" |  wunit1 == "组织部" | wunit1 == "经协办"
|  wunit1 == "经委" |  wunit1 == "统战部" |  wunit1 == "统计局" | wunit1 == "老干部局" | wunit1 == "老龄办"
|  wunit1 == "财政局" |  wunit1 == "财贸办" | wunit1 == "质监局" | wunit1 == "电信局"| wunit1 == "乡镇"
| wunit1 == "政协" | wunit1 == "人大" | wunit1 == "人大办" | wunit1 == "政协办" | wunit1 == "乡镇局"
| wunit1 == "国资委" | wunit1 == "房管局" | wunit1 == "接待办" | wunit1 == "文联" | wunit1 == "方志办"
| wunit1 == "旅游局"| wunit1 == "机关局" | wunit1 == "机械局" | wunit1 == "民防局" | wunit1 == "海关"
| wunit1 == "纺工局" | wunit1 == "残联" | wunit1 == "药监局" | wunit1 == "轻工局" | wunit1 == "610办"
| wunit1 == "综治办" | wunit1 == "外办" | wunit1 == "信息办" | wunit1 == "驻外办"| wunit1 == "政协委"
| wunit1 == "人大委" | wunit1 == "人大研")
save(pilot, file="SNA_prefectures_1808.RData")
View(pilot)
getwd()
setwd("~/E/研究/组织与治理/周雪光/data/")
load("SNA_prefectures_1808.RData")
#pilot0 <- jsall20
pilot0 <- pilot
# drop records before two cities became prefectural cities
pilot <- subset(pilot0, !((pilot$distname2 == "泰州市"| pilot$distname2 == "宿迁市") & pilot$datayr < 1996))
# CHECK JOINT APPOINTMENTS EXCLUDED
# select the right sample
# dists <- c("高邮市", "江都市", "扬州市", "广陵区", "仪征市", "邗江区", "宝应县")
#dists <- c("扬州市")
dists <- c("常州市", "宿迁市", "盐城市", "南通市", "泰州市", "镇江市", "徐州市",
"无锡市", "淮安市", "连云港市", "扬州市", "南京市", "苏州市", "江苏省")
length(dists)
# MAKE LIST() AVAILABLE FOR OUTPUT
output <- list()
output <- lapply(1:length(dists), function(d) {
#d = 1
pilot <- subset(pilot, pilot$distname2 == dists[d])
#  pilot <- subset(pilot, pilot$distname2 == dists)
data_years <- sort(unique(pilot$datayr))
#sort by (in this order): p_name4, datayr, wunit1
pilot <- pilot[order(pilot$p_name4, pilot$datayr, pilot$post1r),]
#return(pilot)
#})
#head(output)
#create new variable to indicate if person will be in different location next year or changes
#location during that year
idx <- seq_len(nrow(pilot))
pilot$lchange <- NA
#we do (head(idx, -1) because conditions cannot be applied to last row
pilot[head(idx, -1), "lchange"] <- ifelse(
#check if next row is still same person
tail(pilot$p_name4, -1) == head(pilot$p_name4, -1) &
#check if wunit1(i) == wunit1(i+1)
tail(pilot$post1r, -1) != head(pilot$post1r, -1), 1, 0)
#return(pilot)
#})
#head(output)
#create new variable that contains the string "A->B", where A is the work unit
#of that row, and B is the work unit of the next row (equivalent to ccity in reference program)
pilot$post1r_movement <- NA
pilot$post1r_movement[head(idx, -1)] <- paste(head(pilot$post1r, -1), tail(pilot$post1r, -1), sep="->")
#experiment without "-1"
# pilot$movement[head(idx)] <- paste(head(pilot$wunit1), tail(pilot$wunit1), sep="->")
#create "from" and "to" variables
pilot$from <- pilot$post1r
pilot$to <- NA
pilot$to[head(idx, -1)] <- tail(pilot$post1r, -1)
#pilot
#only keep the rows that have pilot$change = 1 (don't care about the rows for which the wunit doesn't change)
pilot <- subset(pilot, pilot$lchange == 1)
#return(pilot)
#})
#head(output)
#only keep "from", "to", "movement" rows (disregard all other variables)
keeps <- c("from", "to", "post1r_movement", "distname2",  "datayr", "post1r")
pilot <- pilot[keeps]
#pilot
#separate by years
years <- sort(unique(pilot$datayr))
#years that exist in the data for this distname2
distname2_years <- sort(unique(pilot$datayr))
#distname2_years
#CHECK
years <- array()
for(i in 1:length(data_years)){
if(data_years[i] %in% distname2_years){
years[i] <- data_years[i]
} else {
years[i] <- 0
}
}
#years
subpilot <- lapply(1:length(data_years), function(i){
if(years[i] == 0) {
return(NULL)
}
return(subset(pilot, pilot$datayr==years[i]))
})
#subpilot
cleaned <- list()
cleaned <- lapply(subpilot, function(i){
if(is.null(i)){
return(NULL)
}
#calculate weight by movement, keep only the first one
i <- i[order(i$post1r_movement),] #sort by movement
weight <- tapply(i$post1r_movement, i$post1r_movement, length)
i <- unique(i)
i$weight <- weight
#only keep from, to, weight columns
keeps <- c("from", "to", "weight", "distname2", "datayr")
i <- i[keeps]
#sort from, to, weight (in that order)
i <- i[order(i$from, i$to, i$weight),]
return(i)
})
#cleaned
#make cleaned into one list
cleaned_one_dataframe <- as.data.frame(cleaned[1])
cleaned_num <- 2
while(cleaned_num <= length(cleaned)) {
cleaned_one_dataframe <- rbind(cleaned_one_dataframe, as.data.frame(cleaned[cleaned_num]))
cleaned_num = cleaned_num + 1
}
return(cleaned_one_dataframe)
})
#head(output)
length(output)
# make output into one list from a list of 14
output_one_dataframe <- as.data.frame(output[[1]])
output_num <- 2
while(output_num <= length(output)) {
output_one_dataframe <- rbind(output_one_dataframe, as.data.frame(output[[output_num]]))
output_num = output_num + 1
}
length(output_one_dataframe)
View(output_one_dataframe)
pref_post1r <- output_one_dataframe
pref_post1r
#save(pref_post1r, file = "pref_post1r_TUTORIAL.RData")
#load("pref_post1r_TUTORIAL.RData")
#View(pref_post1r)
library(dplyr)
data_years <- sort(unique(pilot$datayr)) #vector of all data years
#creates list of tables that only include the three year averages 1992, 1993 ... 2008
tya_list <- lapply(1:(length(data_years) - 2), function(i){
tya_years = c(data_years[i], data_years[i+1], data_years[i+2])
return(subset(output_one_dataframe, output_one_dataframe$datayr %in% tya_years))
})
str(tya_list)
# THE "WEIGHT ~ ..." SEEMS PROBLEMATIC.
#for each of those three year averages, create graphs for them
graphs_by_tya = list()
for(i in 1:length(tya_list)) {
#  tya_list[[i]] = aggregate(weight ~from + to + post1r_movement, FUN = "sum", data = tya_list[[i]]) #add up all the weights given the same from, to, and post1r movement
tya_list[[i]] = aggregate(weight ~from + to + weight, FUN = "sum", data = tya_list[[i]]) #add up all the weights given the same from, to, and post1r movement
g_tya = graph_from_data_frame(tya_list[[i]]) #create the graph
graphs_by_tya[[i]] = g_tya
# plot(g_tya,  vertex.label.family="STSong") #uncomment to plot the graphs
}
##### Based on PLOT 6: Overall Distname2, from sector_spacial_YZTZ
map <- readOGR(".", "js_county")#files must be in the same folder as the R program
install.packages("XLConnect")
install.packages("doParallel")
install.packages("gridExtra")
library(gridExtra)
library(XLConnect)
library(doParallel)
fonts() # See what font families are available to you now.
library(readstata13)
library(readxl)
library(igraph)
library(extrafont)
library(ggplot2)
fonts() # See what font families are available to you now.
loadfonts(device = "pdf") # use device = "pdf" for pdf plot output.
#setwd('/Users/VivianHsu/Desktop/Stanford Sophomore Year/Sociology Lab/Assignment Files/170108')
#setwd('/Users/xgzhou/Dropbox/R_prog/output')
setwd("/Users/liding/E/研究/组织与治理/周雪光/Archive 2")
source("functions.R")
setwd("/Users/liding/E/研究/组织与治理/周雪光/data")
load("SNA_prefectures_1808.RData")
prefectures <- c("常州市", "宿迁市", "盐城市", "南通市", "泰州市", "镇江市", "徐州市", "无锡市",
"淮安市", "连云港市", "扬州市", "南京市", "苏州市","江苏省")
pilot <- subset(pilot, pilot$distname2 %in% prefectures)
pilot$sector_area[pilot$wunit1=="人大委"] = "人大各工委"
pilot$sector_area[pilot$wunit1=="外办"] = "其他"
pilot$sector_type[pilot$wunit1=="外办"] = "政府"
# drop cases in 泰州市、宿迁市 before they became prefectures
pilot <- pilot[ !(pilot$distname2 == "泰州市" & pilot$datayr < 1996), ]
pilot <- pilot[ !(pilot$distname2 == "宿迁市" & pilot$datayr < 1996), ]
# change 代市长 etc.
pilot$post1r[pilot$post1r == "代市长"] = "市长"
pilot$post1r[pilot$post1r == "代区长"] = "区长"
for (i in 1:nrow(pilot)) {
if (pilot$distname2[i] == "江苏省")  {
pilot$post1r[i] <- paste("省", pilot$post1r[i], sep = "")
} else if (pilot$distname2[i] %in% prefectures) {
pilot$post1r[i] <- paste("市", pilot$post1r[i], sep = "")
}  else {
pilot$post1r[i] <- paste("县", pilot$post1r[i], sep = "")
}
}
pilot$post1r <- sub("省省","省", pilot$post1r)
pilot$post1r <- sub("市市","市", pilot$post1r)
pilot$post1r <- sub("省市","省", pilot$post1r)
pilot$post1r <- sub("县市","县", pilot$post1r)
pilot$post1r <- sub("县县","县", pilot$post1r)
pilot$post1r <- sub("县区","区", pilot$post1r)
pilot$post1r <- sub("县副区","副区", pilot$post1r)
# identify all the people who have held 市委书记 position in one of the 13 prefectures
people <- unique(subset(pilot, pilot$post1r=="市委书记" & pilot$distname2 %in% prefectures)$p_name4)
# subset only 市委书记
pref_head <-subset(pilot, pilot$distname2 %in% prefectures & pilot$p_name4 %in% people & pilot$post1r=="市委书记")
grp1 <- group_by(pref_head, distname2, p_name4)
tmp1 <- dplyr::summarise(grp1, count =n(),
minyr = min(datayr, na.rm=TRUE),
maxyr = max(datayr, na.rm=TRUE)
)
grp2 <- group_by(tmp1, distname2)
tmp2 <- dplyr::summarise(grp2, nhead1 = n(),
head1_mnyr = mean(count, na.rm=TRUE),
head1_sdyr = sd(count, na.rm=TRUE)
)
tmp2$head1_mnyr <- round(tmp2$head1_mnyr, digits = 2)
tmp2$head1_sdyr <- round(tmp2$head1_sdyr, digits = 2)
tmp2
# identify all the people who have held 市长 position in one of the 13 prefectures
peopleb <- unique(subset(pilot, pilot$post1r=="市长" & pilot$distname2 %in% prefectures)$p_name4)
peopleb
pref_headb <-subset(pilot, pilot$distname2 %in% prefectures & pilot$p_name4 %in% peopleb & pilot$post1r=="市长")
pref_headb
grp1b <- group_by(pref_headb, distname2, p_name4)
tmp1b <- dplyr::summarise(grp1b, count =n(),
minyr = min(datayr, na.rm=TRUE),
maxyr = max(datayr, na.rm=TRUE)
)
tmp1b
grp2b <- group_by(tmp1b, distname2)
tmp2b <- dplyr::summarise(grp2b, nhead2 = n(),
head2_mnyr = mean(count, na.rm=TRUE),
head2_sdyr = sd(count, na.rm=TRUE)
)
tmp2b$head2_mnyr <- round(tmp2b$head2_mnyr, digits = 2)
tmp2b$head2_sdyr <- round(tmp2b$head2_sdyr, digits = 2)
tmp2b
# merge with pilot to get sector variables
tmp2c <- merge(tmp2, tmp2b, by=c("distname2"))
tmp2c
#drop "sector_subnit"
pilot <- filter(pilot, pilot$sector_subunit == "00")
grpbureau <- group_by(pilot, distname2, sector_bureau)
tmp4 <- dplyr::summarise(grpbureau, count =n(),
minyr = min(datayr, na.rm=TRUE),
maxyr = max(datayr, na.rm=TRUE)
)
tmp4$nbureau <- (tmp4$count)
tmp4$diffyr <- tmp4$maxyr-tmp4$minyr
tmp4$mnbureau <- round((tmp4$count/(tmp4$maxyr-tmp4$minyr)), digits = 0)
tmp4$mnbureau[tmp4$mnbureau==Inf] = 1
summary(tmp4)
tmpx <- subset(tmp4, tmp4$count == 630)
tmpx
summary(tmp4$diffyr)
# merge with pilot to get sector variables
tmp5 <- merge(tmp4, tmp2c, by=c("distname2"))
tmp6 <- merge(tmp5, pilot, by=c("distname2","sector_bureau"))
tmp6
# There must be better ways to construct these varaibles. These are my cumbersome way of getting things done!
# keep selected variables
vars <- c("distname2", "sector_bureau", "mnbureau", "nbureau", "sector_type", "sector_area", "nhead1","head1_mnyr", "head1_sdyr",
"nhead2","head2_mnyr", "head2_sdyr")
tmp_f <- select(tmp6, one_of(vars))
tmp_f
tmp_f <- dplyr::select(tmp6, one_of(vars))
tmp_f
# keep unique records of attributes
tmp1 <- unique(tmp_f)
#Recode sector_area "一般" --> "协调"
tmp1$sector_area[tmp1$sector_area == "一般"] = "政府协调"
tmp1$sector_area[tmp1$sector_bureau == "法制办"] = "管制"
tmp1$sector_area[tmp1$sector_bureau == "各类街道办"] = "政府其他"
tmp1$sector_area[tmp1$sector_bureau == "台办"] = "政府协调"
tmp1$sector_area[tmp1$sector_bureau == "外办"] = "政府协调"
tmp1$sector_area[tmp1$sector_bureau == "统计局"] = "经济"
tmp1$sector_area[tmp1$sector_area == "其他"] = "政府其他"
p_attr_1803 <- tmp1
save(p_attr_1803, file="p_attr_1803.RData")
str(p_attr_1803)
table(tmp1$sector_area, tmp1$sector_type)
tmp2 <- filter(tmp1, tmp1$sector_area=="其他")
table(tmp2$sector_bureau)
tmp <- subset(p_attr, p_attr$distname2 == "扬州市")
save(p_attr, file="p_attr.RData")
p_attr_1808 <- tmp1
save(p_attr_1808, file="p_attr_1808.RData")
str(p_attr_1808)
table(tmp1$sector_area, tmp1$sector_type)
tmp2 <- filter(tmp1, tmp1$sector_area=="其他")
table(tmp2$sector_bureau)
tmp <- subset(p_attr, p_attr$distname2 == "扬州市")
1300/0.5
2880-2600
280/2
if (!require(maps)) install.packages("maps")
if (!require(maptools)) install.packages("maptools")
if (!require(sp)) install.packages("sp")
if (!require(spdep)) install.packages("spdep")
if (!require(gstat)) install.packages("gstat")
if (!require(splancs)) install.packages("splancs")
if (!require(spatstat)) install.packages("spatstat")
if (!require(lattice)) install.packages("lattice")
if (!require(pgirmess)) install.packages("pgirmess")
if (!require(RColorBrewer)) install.packages("RColorBrewer")
if (!require(classInt)) install.packages("classInt")
if (!require(spgwr)) install.packages("spgwr")
library(maps)
library(maps)         ## Projections
library(maptools)     ## Data management
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(gstat)        ## Geostatistics
library(splancs)      ## Kernel Density
library(spatstat)     ## Geostatistics
library(pgirmess)     ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(spgwr)        ## GWR
setwd("/Users/liding/E/Bdata/liding17/2018R/l14spa/intro")	## Mac
# setwd("C:\\") 					## Windows
load("Datasets.RData")
rm(list=ls())
# setwd("C:\\") 					## Windows
load("Datasets.RData")
sp_point <- cbind(data$LONG, data$LAT)
data <- crime
sp_point <- cbind(data$LONG, data$LAT)
colnames(sp_point) <- c("LONG","LAT")
head(sp_point)
proj <- CRS("+proj=utm +zone=17 +datum=WGS84")
data.sp <- SpatialPointsDataFrame(coords=sp_point,data,proj4string=proj)
bbox(data.sp)
par(mar=c(2,2,0.2,0.2))
plot(data.sp,pch=16, cex=.5, axes=T)
dev.off()
par(mar=c(2,2,0.2,0.2))
plot(data.sp,pch=16, cex=.5, axes=T)
load("Datasets.RData")
rm(list=ls())
load("Datasets.RData")
ls()
View(crime)
dim(crime)
data <- crime
sp_point <- cbind(data$LONG, data$LAT)
colnames(sp_point) <- c("LONG","LAT")
head(sp_point)
proj <- CRS("+proj=utm +zone=17 +datum=WGS84")
data.sp <- SpatialPointsDataFrame(coords=sp_point,data,proj4string=proj)
plot(data.sp)
bbox(data.sp)
par(mar=c(2,2,0.2,0.2))
plot(data.sp,pch=16, cex=.5, axes=T)
dev.off()
library(ggplot2)
cdata <- fortify(data)
summary(election)
data <- election
## Lambert Conformal Conic Projection
#设定投影系统
#原来的投影有错误
#proj4string(data) <- CRS("+proj=lcc+lon_0=90w +lat_1=20n +lat_2=60n")
#spTransform
summary(data)[1:4]
par(mar=c(0,0,0,0))
plot(data)
dev.off()
par(mar=rep(0.5,4))
plot(election,xlim=bbox(data.sp)[1,],ylim=bbox(data.sp)[2,],col="beige")
plot(data.sp,pch=1, cex=.5,add=T, col="blue")
data2<-election[election@data$STATE_NAME=="Texas",]
#proj4string(data2)<- CRS("+proj=utm +zone=20 +datum=WGS84")
plot(data2)
par(mar=c(0,10,0,0),cex=.6)
display.brewer.all(n=5)
br.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
br.palette(10)
par(mar=c(0,3,0,0),cex=.6)
plot(seq(1,5),cex=10,pch=11,col=br.palette(n=5))
dev.off()
plot(seq(1,5),cex=10,pch=11,col=br.palette(n=5))
par(mar=c(0,3,0,0),cex=.6)
plot(seq(1,5),cex=10,pch=11,col=br.palette(n=5))
par(mar=c(0,3,0,0),cex=.6)
plot(seq(1,5),cex=10,pch=11,col=br.palette(n=5))
dev.off()
data <- election
summary(data)
proj4string(data) <- CRS("+proj=lcc")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
pal <- br.palette(n=5)
## Fixed intervals
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
classes_sd <- classIntervals(var, n=5, style = "sd", rtimes = 1)
## Fixed intervals
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
var <- data$Bush_pct
## Fixed intervals
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
classes_sd <- classIntervals(var, n=5, style = "sd", rtimes = 1)
classes_fi <- classIntervals(var, n=5, style = "fisher", rtimes = 3)
classes_eq <- classIntervals(var, n=5, style = "equal", rtimes = 1)
classes_km <- classIntervals(var, n=5, style = "kmeans", rtimes = 1)
classes_qt <- classIntervals(var, n=5, style = "quantile", rtimes = 1)
par(mar=c(2,2,2,1)+0.1, mfrow=c(2,3))
plot(classes_fx, pal=pal, main="Fixed Intervals", xlab="", ylab="")
plot(classes_sd, pal=pal, main="Standard Deviation", xlab="", ylab="")
plot(classes_fi, pal=pal, main="Fisher-Jenks", xlab="", ylab="")
plot(classes_km, pal=pal, main="K Means", xlab="", ylab="")
plot(classes_eq, pal=pal, main="Equal Interval", xlab="", ylab="")
plot(classes_qt, pal=pal, main="Quantile", xlab="", ylab="")
cols <- findColours(classes_fx, pal)
par(mfrow=c(1,1))
par(mar=rep(0,4))
plot(election,col=cols,border=NA)
legend(x="bottom",cex=.7,fill=attr(cols,"palette"),bty="n",legend=names(attr(cols, "table")),title="Percent of County Vote for Bush (2004)",ncol=5)
cols <- ifelse(data$Bush > data$Kerry,"red","blue")
par(mar=rep(0,4))
plot(election,col=cols,border=NA)
legend(x="bottom",cex=.7,fill=c("red","blue"),bty="n",legend=c("Bush","Kerry"),title="Winner of County Vote (2004)",ncol=2)
dev.off()
head(volcano)[,1:6]          ## Take a look at the data structure
dim(volcano)            ## 87 x 61 grid of elevation points
z <- volcano            ## Height Variable
x <- 10*(1:nrow(z))     ## 10 Meter Spacing (S-N)
y <- 10*(1:ncol(z))     ## 10 Meter Spacing (E-W)
par(mar=rep(0.5,4))
contour(x, y, z, levels=seq(from=min(z), to=max(z), by=10),axes=F)
dev.off()
## Gradient
## 热力图
par(mar=rep(0.5,4))
image(x, y, z, col=terrain.colors(100), axes=F)
dev.off()
par(mar=rep(0.5,4))
image(x, y, z, col=terrain.colors(100), axes=F)
contour(x, y, z, levels=seq(from=min(z), to=max(z), by=10),axes=F, add=T)
contour(x, y, z, levels=seq(from=min(z), to=max(z), by=5),axes=F, add=T)
dev.off()
par(mar=rep(0,4))
persp(x,y,z,theta=120,phi=20,scale=F,axes=F)
dev.off()
z <- 2 * volcano        ## Exaggerate the relief
x <- 10 * (1:nrow(z))   ## 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   ## 10 meter spacing (E to W)
z0 <- min(z) - 20
z <- rbind(z0, cbind(z0, z, z0), z0)
x <- c(min(x) - 1e-10, x, max(x) + 1e-10)
y <- c(min(y) - 1e-10, y, max(y) + 1e-10)
fcol <- matrix("green3", nr = nrow(z)-1, nc = ncol(z)-1)
fcol[ , i2 <- c(1,ncol(fcol))] <- "gray"
fcol[i1 <- c(1,nrow(fcol)) , ] <- "gray"
zi <- (volcano[ -1,-1] + volcano[ -1,-61] + volcano[-87,-1] + volcano[-87,-61])/4
pal <- terrain.colors(20)[cut(zi, quantile(zi, seq(0,1, len = 21)), include.lowest = TRUE)]
fcol[-i1,-i2] <- pal
par(mar=rep(0,4))
persp(x, y, z, theta=120, phi=15, col = fcol, scale = FALSE, shade = 0.4, border = NA)
installed.packages()
colnames(installed.packages())
installed.packages()$Package
in<-installed.packages()
in_p <- installed.packages()
in_p
str(in_p)
View(in_p)
in_p$Package
in_p[Package]
in_pd<-as.data.frame(in_p)
in_pd$Package
.libPaths()
clear(ls=list())
rm(ls=list())
rm(list=ls())
