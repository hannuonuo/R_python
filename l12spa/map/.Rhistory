library(classInt)
#读入分县市地图，省一级的地图比较容易做
setwd("/Users/liding/E/Bdata/Course/7spa/map/chinaadm/")
mland<-rgdal::readOGR("CHN/CHN_adm2.shp")
#mland <- raster::aggregate(mland,by="ID_2")
tw<-rgdal::readOGR("TWN/TWN_adm0.shp")
tw <- raster::aggregate(tw)
mc<-rgdal::readOGR("MAC/MAC_adm0.shp")
mc <- raster::aggregate(mc)
hk<-rgdal::readOGR("HKG/HKG_adm0.shp")
hk <- raster::aggregate(hk)
#分省及全国地图
guo<-rgdal::readOGR("BASIC/国家.shp")
l9<-rgdal::readOGR("BASIC/九段线.shp")
nh<-rgdal::readOGR("BASIC/南海诸岛及其它岛屿.shp")
lguo<-rgdal::readOGR("BASIC/中国线.shp")
sh<-rgdal::readOGR("BASIC/省会城市.shp")
sheng<-rgdal::readOGR("BASIC/中国政区.shp")
#合并地理单元数量
china_map<- bind(mland, tw, mc,hk)
# 现成的南海地图
nhimg <- image_read("BASIC/南海诸岛.png")
#读入外部统计数据
mydata <- read_excel("/Users/liding/E/Bdata/liding17/2018R/l14spa/xtend/市级平均数据.xlsx",
sheet = "Average")
names(mydata) <- c("prov","NL_NAME_2","ename","fic","fii","ti","ainc","cap","dci")
# 地图统计单元数据中ID_2,NL_NAME_2
x <- china_map@data
# ID加上行id,这个行id-与地理元素单元list的顺序一致
xs <- data.frame(id=row.names(x),x)
#香港、澳门、台湾没有ID_2,"NL_NAME_2"的信息还需要完善（留到以后）
xs[,"ID_2"] <- xs[,"id"]
# 清理地理统计单元ID变量中不合适的数据
xs$NL_NAME_2 <- as.character(xs$NL_NAME_2)
xs$NL_NAME_2[xs$NL_NAME_2 =="北京|北京"] <-"北京市"
xs$NL_NAME_2[xs$NL_NAME_2 =="重慶|重庆"] <-"重庆市"
xs$NL_NAME_2[xs$NL_NAME_2 =="常德市|常德市"] <-"常德市"
xs$NL_NAME_2[xs$NL_NAME_2 =="长沙市|長沙市"] <-"长沙市"
xs$NL_NAME_2[xs$NL_NAME_2 =="郴州市|郴州市"] <-"郴州市"
xs$NL_NAME_2[xs$NL_NAME_2 =="衡阳市|衡陽市"] <-"衡阳市"
xs$NL_NAME_2[xs$NL_NAME_2 =="怀化市|懷化市"] <-"怀化市"
xs$NL_NAME_2[xs$NL_NAME_2 =="娄底市|婁底市"] <-"娄底市"
xs$NL_NAME_2[xs$NL_NAME_2 =="邵阳市|邵陽市"] <-"邵阳市"
xs$NL_NAME_2[xs$NL_NAME_2 =="湘潭市|湘潭市"] <-"湘潭市"
xs$NL_NAME_2[xs$NL_NAME_2 =="湘西土家族苗族自治州|湘西土家族苗族自治州"] <-"湘西土家族苗族自治州"
xs$NL_NAME_2[xs$NL_NAME_2 =="益阳市|益陽市"] <-"益阳市"
xs$NL_NAME_2[xs$NL_NAME_2 =="永州市|永州市"] <-"永州市"
xs$NL_NAME_2[xs$NL_NAME_2 =="岳阳市|岳陽市"] <-"岳阳市"
xs$NL_NAME_2[xs$NL_NAME_2 =="张家界市|張家界市"] <-"张家界市"
xs$NL_NAME_2[xs$NL_NAME_2 =="株洲市|株洲市"] <-"株洲市"
xs$NL_NAME_2[xs$NL_NAME_2 =="滨州"] <-"滨州市"
xs$NL_NAME_2[xs$NL_NAME_2 =="上海|上海"] <-"上海市"
xs$NL_NAME_2[xs$NL_NAME_2 =="运城县"] <-"运城市"
xs$NL_NAME_2[xs$NL_NAME_2 =="天津|天津"] <-"天津市"
xs$NL_NAME_2[xs$NL_NAME_2 =="巴音郭愣蒙古自治州"] <-"巴音郭楞蒙古自治州"
xs$NL_NAME_2[345] <-"台湾"
xs$NL_NAME_2[346] <-"澳门"
xs$NL_NAME_2[345] <-"香港"
#地理统计单元数据和外部统计数据合并
# by NL_NAME_2
data<-plyr::join(xs,mydata,type="full")
#离散颜色标度分割：
qa <- quantile(na.omit(data$fic),c(0,0.2,0.4,0.6,0.8,1.0))
data$fic_q<-cut(data$fic,qa,labels= c("0-20%","20-40%","40-60%","60-80%","80-100%"),include.lowest = TRUE)
table(data$fic_q)
# 地图元素单元数据，有list 顺序信息，即前面的id信息
map_data <- fortify(china_map)
# by id，将地理统计单元的ID信息合并到地理元素单元中
map_data <- plyr::join(map_data, data, type ="full")
# 制成地图，为拼接外部来源图片做准备
p <- ggplot()+
geom_polygon(data=map_data,aes(long,lat,group=group,fill=fic_q),colour=NA,size=0.25) + #地区
geom_polygon(data=sheng,aes(long,lat,group=group,fill=NA),colour="black",size=0.25) + # 省界
scale_fill_brewer(palette="RdYlGn")+
coord_map() +
theme(
legend.position=c(0.08, 0.20),
legend.text = element_text(size=rel(2)),
legend.title = element_text(size=rel(2)),
panel.grid = element_blank(),
panel.background = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
plot.background=element_rect(I(0),linetype=0),
plot.title = element_text(family="STKaiti",size=32,
hjust=0.5,  colour = "red",face = "bold")
) + labs(title = "中国各地级市财政收入")
#  theme_nothing()
# 画底图(大陆),保存 比较慢,8分钟
# ggsave(p,filename = "中国地图.png",
#                width = 5, height = 4, dpi = 300)
#
#最好将地图输出到文件中而不是使用ploty打印在窗口——很慢
plot2 <- function(theplot, name, ...) {
name <- paste0(name, ".png")
png(filename=name,width = 960, height = 960, units = "px", pointsize = 12)
print(theplot)
dev.off()
} #plotting function
plot2(p, name="地图")
###
#如果是省一级的数据
sid <- sheng@data[c("ADCODE99","NAME")]
sid<- data.frame(id=row.names(sid),sid)
shengdata <- read.csv("/Users/liding/E/Bdata/liding17/2018R/data/shengdata.csv",sep = ",",encoding="utf-8")
shengdata<-plyr::join(sid,shengdata,by="NAME",type="full")
smap_data <- fortify(sheng)
smap_data <- plyr::join(smap_data, shengdata, type ="full")
ggplot(data = smap_data, aes(x = long, y = lat,  group = id, fill = kidgarden)) +
geom_polygon(colour = 'black') +
scale_fill_gradient(low = 'green', high = 'blue') +
labs(title ="Numbers of kidgardens in China") +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()) +
coord_map()
#中国地图,93 95
# if (!require('mapdata')) install.packages("mapdata")
library(mapdata)
china <- map_data("china")
map("china", col = "red4", panel.first = grid())
# 有点问题，连线
ggplot(china, aes(x=long,y=lat,group=group)) +
geom_polygon(fill="white",colour="black") +
labs(title = "china Map")
## json行政区地图-分省地图
## 地图数据来源 http://datav.aliyun.com/static/tools/atlas/#&lat=33.521903996156105&lng=104.29849999999999&zoom=3
library("jsonlite")
library("ggplot2")
library(plyr)
library(dplyr)
setwd("/Users/liding/E/Bdata/liding17/2018R/l14spa/map/")
cn_data <- fromJSON("中国.json")
cn_data1<-cn_data$features$properties[,1:2]
cn_data2<-cn_data$features$properties$center
cn_pdata<-cbind(cn_data1,cn_data2)
#省会点
cn_data2<-as.data.frame(cn_data$features$properties$center)
cn_map_data<-cn_data $features$geometry$coordinates
lengths(cn_map_data)
for( i in 1:length(cn_map_data)){
prvmapdata<-cn_map_data[[i]]
if (length(prvmapdata)<20){
for(m in 1:length(prvmapdata)){
prvmapt <- prvmapdata[[m]]
dim(prvmapt)=c(length(prvmapdata[[m]])/2,2)
prvmapdata1<-data.frame(prvmapt)
names(prvmapdata1)<-c("lon","lat")
prvmapdata1$id<-i
prvmapdata1$group<-as.numeric(paste0(i,".",m,1))
prvmapdata1$order<-1:dim(prvmapdata1)[1]
mapdata1<-rbind(mapdata1,prvmapdata1)
}
}else{
dim(prvmapdata)=c(length(prvmapdata)/2,2)
prvmapdata2<-data.frame(prvmapdata);names(prvmapdata2)<-c("lon","lat")
prvmapdata2$id<-i
prvmapdata2$group<-as.numeric(paste0(i,".",1))
prvmapdata2$order<-1:dim(prvmapdata2)[1]
mapdata2<-rbind(mapdata2,prvmapdata2)
}
mydatanew<-rbind(mapdata1,mapdata2)
}
mapdata1<-data.frame()
mapdata2<-data.frame()
for( i in 1:length(cn_map_data)){
prvmapdata<-cn_map_data[[i]]
if (length(prvmapdata)<20){
for(m in 1:length(prvmapdata)){
prvmapt <- prvmapdata[[m]]
dim(prvmapt)=c(length(prvmapdata[[m]])/2,2)
prvmapdata1<-data.frame(prvmapt)
names(prvmapdata1)<-c("lon","lat")
prvmapdata1$id<-i
prvmapdata1$group<-as.numeric(paste0(i,".",m,1))
prvmapdata1$order<-1:dim(prvmapdata1)[1]
mapdata1<-rbind(mapdata1,prvmapdata1)
}
}else{
dim(prvmapdata)=c(length(prvmapdata)/2,2)
prvmapdata2<-data.frame(prvmapdata);names(prvmapdata2)<-c("lon","lat")
prvmapdata2$id<-i
prvmapdata2$group<-as.numeric(paste0(i,".",1))
prvmapdata2$order<-1:dim(prvmapdata2)[1]
mapdata2<-rbind(mapdata2,prvmapdata2)
}
mydatanew<-rbind(mapdata1,mapdata2)
}
## json行政区地图-分省地图
## 地图数据来源 http://datav.aliyun.com/static/tools/atlas/#&lat=33.521903996156105&lng=104.29849999999999&zoom=3
library(jsonlite)
library(leaflet)
library(dplyr)
library(geojsonio)
library(rgdal)
library(sf)
library(ggplot2)
library(maptools)
library(plyr)
library(htmltools)
options(stringsAsFactors=FALSE,warn=FALSE)
geojson3<-readLines(url,warn=FALSE,encoding="UTF-8")%>%paste(collapse="\n")%>%fromJSON(simplifyVector=FALSE)
geojson3<-readLines("安徽省.json",warn=FALSE,encoding="UTF-8")%>%paste(collapse="\n")%>%fromJSON(simplifyVector=FALSE)
mydata<-ldply(geojson3$features,function(feat){
name<-feat$properties$name
id<- feat$properties$id
mydata<-data.frame(name,id)
})
#读入数据
#三种方式：（2,3两种是没啥区别的，但是simplifyVector=FALSE参数设定与否则至关重要，他决定着输入的json数据是经过平整的向量化数据还是原生的list数据，这里的leaflet需要原生格式的json数据
geojson1<-fromJSON("中国.json") #在同一层级对象长度一致，便会被自动视作数据框。
geojson2<-fromJSON("中国.json",simplifyVector=FALSE)  #不强转化为数据框。
geojson3<-readLines("中国.json",warn=FALSE,encoding="UTF-8")%>%paste(collapse="\n")%>%fromJSON(simplifyVector=FALSE)
mydata<-ldply(geojson3$features,function(feat){
name<-feat$properties$name
id<- feat$properties$id
mydata<-data.frame(name,id)
})
anhui_city_data1<-anhui_data$features$properties[,1:2]
## 安徽省的地图
anhui_data <- fromJSON("安徽省.json")
anhui_city_data1<-anhui_data$features$properties[,1:2]
mydata<-geojson3$features$properties[,1:2]
mydata<-ldply(geojson3$features,function(feat){
name<-feat$properties$name
id<- feat$properties$adcode
mydata<-data.frame(name,id)
})
View(l9)
leaflet()%>%
addTiles(group ="OSM (default)")%>%
#  setView(lng=116.435889,lat=39.932642,zoom=8)%>%
addGeoJSON(geojson3,group="GeoJSON")%>%
addProviderTiles(providers$CartoDB.Positron,group="CartoDB")%>%
addProviderTiles(providers$Stamen.TonerLines,options=providerTileOptions(opacity=0.35),group="TonerLines")%>%
addProviderTiles(providers$Stamen.TonerLabels,group="TonerLabels")%>%
addLayersControl(
baseGroups = c("OSM (default)", "CartoDB", "TonerLines","TonerLabels"),
overlayGroups = c("GeoJSON"),
options=layersControlOptions(collapsed = FALSE)
)
leaflet()%>%
#  setView(lng=116.435889,lat=39.932642,zoom=8)%>%
addGeoJSON(geojson3,group="GeoJSON")
#########################################
####       用json数据作市级图            ####
#########################################
## json行政区地图
## 地图数据来源 http://datav.aliyun.com/static/tools/atlas/#&lat=33.521903996156105&lng=104.29849999999999&zoom=3
library("jsonlite")
leaflet()%>%
setView(lng=116.435889,lat=39.932642,zoom=5)%>%
addGeoJSON(geojson3,group="GeoJSON")
leaflet()%>%
setView(lng=110.435889,lat=39.932642,zoom=4)%>%
addGeoJSON(geojson3,group="GeoJSON")
set.seed(1234)
#向list对象中添加数据（随机数据）
geojson3$features<-lapply(geojson3$features,function(feat){
feat$properties$scale<-runif(1,0,10)
feat
})
#从list对象中读取数据(主要读取我们可做更改与扩展的行政区划列表信息)
mydata<-ldply(geojson3$features,function(feat){
name<-feat$properties$name
id<- feat$properties$adcode
scale<-as.numeric(feat$properties$scale)
mydata<-data.frame(name,id,scale)
})
# Default styles for all features
#it has  higher precedence  compare with  the style in a function of GeoJSON
geojson3$style=list(weight=1,color="#555555",opacity=1,fillOpacity=0.8)
# Color by scale using quantiles
pal<-colorQuantile("Greens",mydata$scale)
# Add a properties$style list to each feature
geojson3$features <- lapply(geojson3$features, function(feat) {
feat$properties$style<-list(
fillColor=pal(feat$properties$scale)
)
feat
})
leaflet()%>%
setView(lng=110.435889,lat=39.932642,zoom=4)%>%
addGeoJSON(geojson3,group="GeoJSON")
mdata <- read.table(file = "clipboard", sep = "t", header=TRUE)
mdata <- read.table(file = pipe("clipboard"), sep = "t", header=TRUE)
mdata <- read.delim(file = pipe("clipboard"), sep = "\t", header=TRUE)
mdata <- read.delim(pipe("clipboard"), sep = "\t", header=TRUE)
library(psych)
library(psych)
mdata <- read.clipboard.tab()
mydata <- left_join(mydata,mdata,by = c("id" = "pid"))
mapStates<-map("state",fill=TRUE,plot=FALSE)
leaflet(mapStates) %>% addTiles() %>%addPolygons(fillColor=topo.colors(10,alpha =NULL), stroke = FALSE)
mapStates<-map("china",fill=TRUE,plot=FALSE)
leaflet(mapStates) %>% addTiles() %>%addPolygons(fillColor=topo.colors(10,alpha =NULL), stroke = FALSE)
cn_map <-readShapePoly("/Users/liding/E/Bdata/liding17/2017R/l12spa/map/chinacounty/counties_china.shp")
cn_map$LAST_NAME9 = iconv(cn_map$LAST_NAME9,"UTF8","GB2312")
cn_map <-readShapePoly("/Users/liding/E/Bdata/liding17/2017R/l12spa/map/chinacounty/counties_china.shp")
cn_map$LAST_NAME9 = iconv(cn_map$LAST_NAME9,"UTF8","gb2312")
str(cn_map)
leaflet(cn_map)%>%addTiles()%>%addPolygons()
leaflet()%>%
setView(m,lng=116.38,lat=39.9,zoom=3)%>%
addGeoJSON(geojson3,group="GeoJSON")
china_map<-readShapePoly("/Users/liding/E/Bdata/liding17/2017R/l12spa/map/chinaadm/BASIC/中国政区.shp")
leaflet(china_map)%>%addTiles()%>%
setView(116.387021,39.969369,zoom=3)
mydata<-read.csv("c/Users/liding/E/Bdata/rtemp/c1617birth.csv")
mydata<-read.csv("c/Users/liding/E/Bdata/rtemp/c1617birth.csv")
mydata<-read.csv("/Users/liding/E/Bdata/rtemp/c1617birth.csv")
mydata<-read.delim("/Users/liding/E/Bdata/rtemp/c1617birth.csv",sep"\t")
mydata<-read.delim("/Users/liding/E/Bdata/rtemp/c1617birth.csv",sep="\t")
head(myata)
head(mydata)
mydata$type<-cut(mydata$p2317,c(50,60,70,80),replace=TRUE)
shape <- merge(china_map,mydata,by.x="ADCODE99",by.y="pid")
table(mydata$type)
mydata$type<-cut(mydata$p2317,c(50,60,70,80),replace=TRUE)
shape <- merge(china_map,mydata,by.x="ADCODE99",by.y="pid")
pal <- colorFactor(c("green","red","blue"), domain = c("A", "B","C"))#设置色盘：
i_popup<-paste0("<strong>Province:</strong>",shape$NAME,"<br>","<strong>Level:</strong>",shape$type)
#设置弹出窗口
leaflet(shape)%>%addTiles()%>%
setView(116.387021,39.969369,zoom=3)%>%
addPolygons(fillColor=~pal(shape$type),fillOpacity=0.8,color="#000000",weight=1,popup=i_popup)%>%
addLegend(pal=pal,values=shape@data$type,position="bottomright",title=paste0("2017年多孩出生","","占比607080以上"))
plot(china_map)
#向list对象中添加数据
geojson3$features<-lapply(geojson3$features,function(feat){
feat$properties$scale<-mdata$p2317(feat$properties$adcode)
feat
})
mdata<-read.delim("/Users/liding/E/Bdata/rtemp/c1617birth.csv",sep="\t")
#向list对象中添加数据
geojson3$features<-lapply(geojson3$features,function(feat){
feat$properties$scale<-mdata$p2317(feat$properties$adcode)
feat
})
mdata$p2317[mdata$pid=110000]
mdata$p2317[mdata$pid==110000]
geojson3$features[1]$properties$adcode
geojson3$features[1]$properties$adcode[1]
geojson3$features[[1]]$properties$adcode
#向list对象中添加数据
geojson3$features<-lapply(geojson3$features,function(feat){
feat$properties$scale<-mdata$p2317[mdata$pid==feat$properties$adcode]
feat
})
#从list对象中读取数据
mydata<-ldply(geojson3$features,function(feat){
name<-feat$properties$name
id<- feat$properties$adcode
mydata<-data.frame(name,id)
})
mydata <- left_join(mydata,mdata,by = c("id" = "pid"))
# Color by scale using quantiles
# mydata$type<-cut(mydata$p2317,c(0,50,60,70,80,100),replace=TRUE)
pal<-colorQuantile("Greens",mydata$p2317)
pal
# Add a properties$style list to each feature
geojson3$features <- lapply(geojson3$features, function(feat) {
feat$properties$style<-list(
fillColor=pal(feat$properties$scale)
)
feat
})
leaflet()%>%
setView(m,lng=116.38,lat=39.9,zoom=3)%>%
addGeoJSON(geojson3,group="GeoJSON")
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/E/Bdata/liding17/2017R/l12spa/map/chinaadm/CHN/CHN_adm2.shp")
View(GDP)
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/E/Bdata/liding17/2017R/l12spa/map/chinaadm/CHN/CHN_adm1.shp")
regiondf <- fortify(GDP)
# 提取属性表
GDPdf <- GDP@data
GDPdf$ID_0
GDPdf$NL_NAME_1
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/DATA/中国地图/中国地图2012/china_basic_map/bou2_4l.shp")
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/DATA/中国地图/中国地图2012/china_basic_map/中国政区.shp")
GDPdf$NAME
GDP@data$NAME
# 将SpatialPolygonsDataFrame转换为ggplot函数需要的数据框格式
regiondf <- fortify(GDP)
# 提取属性表
GDPdf <- GDP@data
# 为属性表加上与空间数据框id对应的id号
GDPdf <-data.frame(GDPdf, id_1=0:33)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="ADCODE99", by.y="pid")
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="ADCODE99", by.y="pid", all.x = al)
# 合并空间数据框和属性数据框
regiondf2 <-data.table::merge(regiondf, mdata,by.x="ADCODE99", by.y="pid", all.x = all)
# 合并空间数据框和属性数据框
library(data.table)
regiondf2 <-data.table::merge(regiondf, mdata,by.x="ADCODE99", by.y="pid", all.x = all)
regiondf2 <-merge(regiondf, mdata,by.x="ADCODE99", by.y="pid", all.x = all)
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/DATA/中国地图/CNborder/t1.shp")
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/DATA/中国地图/中国地图2008/省界_region.shp")
plot(GDP)
ggplot(GDP, aes(long, lat, group = group))+
geom_polygon()
ggplot(GDP, aes(long, lat, group = group))+geom_polygon()
GDP@data$NAME
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="CODE", by.y="pid", all.x = all)
mdata <- read.clipboard.tab()
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="CODE", by.y="pid", all.x = all)
df <- fortify(GDP)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="CODE", by.y="pid", all.x = all)
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/DATA/中国地图/中国地图2008/省界_region.shp")
mdata <- read.clipboard.tab()
df <- fortify(GDP)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="CODE", by.y="pid", all.x = all)
table(GDP@data$NAME)
head(mdata)
mdata <- read.clipboard.tab()
head(mdata)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, mdata,by.x="CODE", by.y="pid", all.x = all)
# 合并空间数据框和属性数据框
regiondf2 <-merge(df, mdata,by.x="CODE", by.y="pid", all.x = all)
df <- fortify(GDP)
# 合并空间数据框和属性数据框
regiondf2 <-merge(df, mdata,by.x="CODE", by.y="pid", all.x = all)
head(df)
df <- fortify(GDP,"CODE")
# 合并空间数据框和属性数据框
regiondf2 <-merge(df, mdata, by.x="CODE", by.y="pid", all.x = all)
# 读入包含GDP属性表的空间数据
GDP <- readOGR("/Users/liding/DATA/中国地图/中国地图2008/省界_region.shp")
df <- fortify(GDP,"CODE")
head(df)
regiondf <- fortify(GDP)
# 提取属性表
GDPdf <- GDP@data
# 为属性表加上与空间数据框id对应的id号
GDPdf <-data.frame(GDPdf, id_1=0:33)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf, GDPdf,by.x="id", by.y="id_1")
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf2, mdata,by.x="CODE", by.y="pid", all.x = all)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf2, mdata, by.x="CODE", by.y="pid", all.x = TURE)
# 合并空间数据框和属性数据框
regiondf2 <-merge(regiondf2, mdata, by.x="CODE", by.y="pid", all.x = TRUE)
# 添加一列2013年各省市的GDP区间划分结果
regiondf2$GDP_d <-cut(regiondf2$p2317,
breaks =c(0,50,60,70,80,100),
include.lowest=T)
# 使用ggplot函数绘图
ggplot(regiondf2, aes(long, lat, group = group))+
geom_polygon(aes(fill = GDP_d))+
scale_fill_manual(values=colors)
# 添加一列2013年各省市的GDP区间划分结果
colors=c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77")
regiondf2$GDP_d <-cut(regiondf2$p2317,
breaks =c(0,50,60,70,80,100),
include.lowest=T)
# 使用ggplot函数绘图
ggplot(regiondf2, aes(long, lat, group = group))+
geom_polygon(aes(fill = GDP_d))+
scale_fill_manual(values=colors)
#
#mdata <- read.clipboard.tab()
mdata<-read.delim("/Users/liding/E/Bdata/rtemp/c1617birth.csv",sep="\t")
#向list对象中添加数据
geojson3$features<-lapply(geojson3$features,function(feat){
feat$properties$scale<-mdata$p2317[mdata$pid==feat$properties$adcode]
feat
})
#从list对象中读取数据
mydata<-ldply(geojson3$features,function(feat){
name<-feat$properties$name
id<- feat$properties$adcode
mydata<-data.frame(name,id)
})
mydata <- left_join(mydata,mdata,by = c("id" = "pid"))
# Default styles for all features
geojson3$style=list(weight=1,color="#555555",opacity=1,fillOpacity=0.8)
# Color by scale using quantiles
# mydata$type<-cut(mydata$p2317,c(0,50,60,70,80,100),replace=TRUE)
pal<-colorQuantile("Greens",mydata$p2317)
# Add a properties$style list to each feature
geojson3$features <- lapply(geojson3$features, function(feat) {
feat$properties$style<-list(
fillColor=pal(feat$properties$scale)
)
feat
})
leaflet()%>%
setView(m,lng=116.38,lat=39.9,zoom=3)%>%
addGeoJSON(geojson3,group="GeoJSON")
#########################################
####       用json数据作市级图            ####
#########################################
## json行政区地图
## 地图数据来源 http://datav.aliyun.com/static/tools/atlas/#&lat=33.521903996156105&lng=104.29849999999999&zoom=3
library("jsonlite")
