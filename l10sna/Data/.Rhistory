head(bm.files)
saveGIF(bm.files,movie.name='wpp2017.gif',interval=0.5,ani.width=700,ani.height=600,convert='gm convert')
gganimate(bm.files,filename="wpp2017.gif",convert='gm convert')
ani.options(delay=3)
saveGIF(bm.files,movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
?im.convert
saveGIF({
for (i in 1:9) {
p <- sprintf("%i.png")
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
p <- png::readPNG("%i.png")
setwd("/Users/liding/E/Bdata/wpp/gif/")
bm.files = sprintf("%i.png", 1:9)
head(bm.files)
ani.options(delay=3)
saveGIF({
for (i in 1:9) {
p <- png::readPNG("%i.png")
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
setwd("/Users/liding/E/Bdata/wpp/gif/")
saveGIF({
for (i in 1:9) {
p <- png::readPNG(sprintf("%i.png"))
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
saveGIF({
for (i in 1:9) {
p <- png::readPNG(i.png)
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
saveGIF({
for (i in 1:9) {
p <- png::readPNG(i)
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
saveGIF({
for (i in 1:9) {
p <- png::readPNG("i")
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
saveGIF({
for (i in 1:9) {
p <- png::readPNG("1.png")
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert')
saveGIF({
for (i in 1:9) {
p <- png::readPNG("1.png")
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert',delay=3)
setwd("/Users/liding/E/Bdata/wpp/gif/")
saveGIF({
for (i in 1:9) {
p <- png::readPNG("%i.png")
print(p)
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert',delay=3)
setwd("/Users/liding/E/Bdata/wpp/gif/")
saveGIF({
for (i in 1:9) {
file=paste(i,".png",sep="")
p <- png::readPNG(file)
print(p)
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert',delay=3)
setwd("/Users/liding/E/Bdata/wpp/gif/")
saveGIF({
for (i in 1:9) {
file=paste(i,".png",sep="")
p <- png::readPNG(file)
plot(p)
}},movie.name='wpp2017.gif',interval=0.5,convert='gm convert',delay=3)
setwd("/Users/liding/E/Bdata/wpp/gif/")
system("convert -delay 80 *.png wpp.gif")
setwd("/Users/liding/E/Bdata/wpp/gif/")
system("gm convert -delay 80 *.png wpp.gif")
setwd("/Users/liding/E/Bdata/wpp/gif/")
system("gm convert -delay 80 *.png wpp.gif")
system("gm convert -delay 80 1.png 2.png 3.png wpp.gif")
system("gm convert -delay 80 1.png 2.png 3.png 4.png 5.png 6.png 7.png 8.png 9.png wpp.gif")
setwd("/Users/liding/E/Bdata/wpp/wpp/")
system("gm convert -delay 160 batch_1.png batch_2.png batch_3.png batch_4.png batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png wpp1990.gif")
system("gm convert -delay 160 batch_1.png batch_2.png batch_3.png batch_4.png batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp1990.gif")
system("gm convert -delay  batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp1990.gif")
system("gm convert -delay  batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp2010.gif")
system("gm convert -delay 160 batch_1.png batch_2.png batch_3.png batch_4.png batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp1990.gif")
system("gm convert -delay 160 batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp2010.gif")
system("gm convert -delay 160 batch_1.png batch_2.png batch_3.png batch_4.png batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp1990.gif")
system("gm convert -delay 160 batch_5.png batch_6.png batch_7.png batch_8.png batch_9.png batch_10.png batch_11.png batch_12.png batch_13.png wpp2010.gif")
library(igraph)
advice_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('http://sna.stanford.edu/sna_R_labs/data/Krack-High-Tec-edgelist-ReportsTo.txt')
advice_data_frame
head(friendship_data_frame)
setwd('/Users/liding/E/Bdata/liding17/2017R/l11sna/Data')
advice_data_frame <- read.table('Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('Krack-High-Tec-edgelist-ReportsTo.txt')
head(friendship_data_frame)
tail(reports_to_data_frame)
attributes <- read.csv('Krack-High-Tec-Attributes.csv', header=T)
attributes
krack_full_data_frame <- cbind(advice_data_frame,
friendship_data_frame$friendship_tie,
reports_to_data_frame$reports_to_tie)
head(krack_full_data_frame)
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
# Now that
advice_data_frame$ego == friendship_data_frame$ego
# That's a lot of output to sort through. Instead, we can just have R return
# which row entries are not equal using the syntax below:
which(advice_data_frame$ego != friendship_data_frame$ego)
krack_full_data_frame <- cbind(advice_data_frame,
friendship_data_frame$friendship_tie,
reports_to_data_frame$reports_to_tie)
head(advice_data_frame)
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
head(friendship_data_frame)
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
head(reports_to_data_frame)
krack_full_data_frame <- cbind(advice_data_frame,
friendship_data_frame$friendship_tie,
reports_to_data_frame$reports_to_tie)
head(krack_full_data_frame)
names(krack_full_data_frame)[4:5] <- c("friendship_tie",
"reports_to_tie")
head(krack_full_data_frame)
library("network")
head(links)
head(nodes)
net3 <- network(links, vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F)
net3
net3[,]
net3 %n% "net.name" <- "Media Network" #  network attribute
net3 %v% "media"    # Node attribute
net3 %e% "type"     # Node attribute
net3 %v% "col" <- c("gray70", "tomato", "gold")[net3 %v% "media.type"]
plot(net3, vertex.cex=(net3 %v% "audience.size")/7, vertex.col="col")
l <- plot(net3, vertex.cex=(net3 %v% "audience.size")/7, vertex.col="col")
plot(net3, vertex.cex=(net3 %v% "audience.size")/7, vertex.col="col", coord=l)
plot(net3, vertex.cex=(net3 %v% "audience.size")/7, vertex.col="col", interactive=T)
library("animation")
library("igraph")
l <- layout_with_fr(net)
saveGIF( {  col <- rep("grey40", vcount(net))
plot(net, vertex.color=col, layout=l)
step.1 <- V(net)[media=="Wall Street Journal"]
col[step.1] <- "#ff5100"
plot(net, vertex.color=col, layout=l)
step.2 <- unlist(neighborhood(net, 1, step.1, mode="out"))
col[setdiff(step.2, step.1)] <- "#ff9d00"
plot(net, vertex.color=col, layout=l)
step.3 <- unlist(neighborhood(net, 2, step.1, mode="out"))
col[setdiff(step.3, step.2)] <- "#FFDD1F"
plot(net, vertex.color=col, layout=l)  },
interval = .8, movie.name="network_animation.gif" )
ani.options("gm convert")
ani.options(convert="gm convert")
saveGIF( {  col <- rep("grey40", vcount(net))
plot(net, vertex.color=col, layout=l)
step.1 <- V(net)[media=="Wall Street Journal"]
col[step.1] <- "#ff5100"
plot(net, vertex.color=col, layout=l)
step.2 <- unlist(neighborhood(net, 1, step.1, mode="out"))
col[setdiff(step.2, step.1)] <- "#ff9d00"
plot(net, vertex.color=col, layout=l)
step.3 <- unlist(neighborhood(net, 2, step.1, mode="out"))
col[setdiff(step.3, step.2)] <- "#FFDD1F"
plot(net, vertex.color=col, layout=l)  },
interval = .8, movie.name="network_animation.gif" )
saveGIF( {  col <- rep("grey40", vcount(net))
plot(net, vertex.color=col, layout=l)
step.1 <- V(net)[media=="Wall Street Journal"]
col[step.1] <- "#ff5100"
plot(net, vertex.color=col, layout=l)
step.2 <- unlist(neighborhood(net, 1, step.1, mode="out"))
col[setdiff(step.2, step.1)] <- "#ff9d00"
plot(net, vertex.color=col, layout=l)
step.3 <- unlist(neighborhood(net, 2, step.1, mode="out"))
col[setdiff(step.3, step.2)] <- "#FFDD1F"
plot(net, vertex.color=col, layout=l)  },
interval = .8, movie.name="network_animation.gif",convert='gm convert' )
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
head(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full_data_frame <- data.frame(ego = advice_data_frame[,1],
alter = advice_data_frame[,2],
advice_tie = advice_data_frame[,3],
friendship_tie = friendship_data_frame[,3],
reports_to_tie = reports_to_data_frame[,3])
head(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
get.edge.attribute(krack_full, 'advice_tie')
network::get.edge.attribute(krack_full, 'advice_tie')
igraph::get.edge.attribute(krack_full, 'advice_tie')
get.edge.attribute(krack_full, 'friendship_tie')
krack_full_symmetrized <- as.undirected(krack_full, mode='collapse')
summary(krack_full_symmetrized)
for (i in V(krack_full)) {
for (j in names(attributes)) {
krack_full <- set.vertex.attribute(krack_full,
j,
index = i,
attributes[i + 1, j])
}
}
for (i in V(krack_full)) {
for (j in names(attributes)) {
krack_full <- igraph::set.vertex.attribute(krack_full,
j,
index = i,
attributes[i + 1, j])
}
}
attributes = cbind(1:length(attributes[,1]), attributes)
krack_full <- graph.data.frame(d = krack_full_nonzero_edges,
vertices = attributes)
# We can see a list of the values for a given attribute for all of
# the actors in the network.
igraph::get.vertex.attribute(krack_full, 'AGE')
igraph::get.vertex.attribute(krack_full, 'TENURE')
igraph::get.vertex.attribute(krack_full, 'LEVEL')
igraph::get.vertex.attribute(krack_full, 'DEPT')
pdf("1.1_Krackhardt_Full.pdf")
plot(krack_full)
dev.off()
krack_advice_only <- delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0])
summary(krack_advice_only)
pdf("1.2_Krackhardt_Advice.pdf")
plot(krack_advice_only)
dev.off()
# advice only
krack_advice_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0])
summary(krack_advice_only)
pdf("1.2_Krackhardt_Advice.pdf")
plot(krack_advice_only)
dev.off()
# friendship only
krack_friendship_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "friendship_tie") == 0])
summary(krack_friendship_only)
pdf("1.3_Krackhardt_Friendship.pdf")
plot(krack_friendship_only)
dev.off()
# reports-to only
krack_reports_to_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "reports_to_tie") == 0])
summary(krack_reports_to_only)
pdf("1.4_Krackhardt_Reports.pdf")
plot(krack_reports_to_only)
dev.off()
reports_to_layout <- layout.fruchterman.reingold(krack_reports_to_only)
pdf("1.5_Krackhardt_Reports_Fruchterman_Reingold.pdf")
plot(krack_reports_to_only,
layout=reports_to_layout)
dev.off()
dept_vertex_colors = igraph::get.vertex.attribute(krack_full,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
pdf("1.6_Krackhardt_Reports_Color.pdf")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5)
dev.off()
pdf("1.7_Krackhardt_Reports_Vertex_Size.pdf")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
dev.off()
tenure_vertex_sizes = igraph::get.vertex.attribute(krack_full,"TENURE")
pdf("1.7_Krackhardt_Reports_Vertex_Size.pdf")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
dev.off()
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(krack_full)$color[ E(krack_full)$advice_tie==1 ] = tie_type_colors[1]
E(krack_full)$color[ E(krack_full)$friendship_tie==1 ] = tie_type_colors[2]
E(krack_full)$color[ E(krack_full)$reports_to_tie==1 ] = tie_type_colors[3]
E(krack_full)$arrow.size=.5
V(krack_full)$color = dept_vertex_colors
V(krack_full)$frame = dept_vertex_colors
pdf("1.8_Krackhardt_Overlayed_Ties.pdf")
plot(krack_full,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
legend(1,
1.25,
legend = c('Advice',
'Friendship',
'Reports To'),
col = tie_type_colors,
lty=1,
cex = .7)
dev.off()
pdf("1.9_Krackhardt_Overlayed_Structure.pdf")
plot(krack_friendship_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes,
main='Krackhardt High-Tech Managers')
dev.off()
library(igraph)
setwd('/Users/liding/E/Bdata/liding17/2017R/l11sna/Data')
advice_data_frame <- read.table('Krack-High-Tec-edgelist-Advice.txt')
friendship_data_frame <- read.table('Krack-High-Tec-edgelist-Friendship.txt')
reports_to_data_frame <- read.table('Krack-High-Tec-edgelist-ReportsTo.txt')
attributes <- read.csv('Krack-High-Tec-Attributes.csv', header=T)
View(advice_data_frame)
fix(reports_to_data_frame)
colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
head(advice_data_frame)
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
head(friendship_data_frame)
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
head(reports_to_data_frame)
advice_data_frame$ego == friendship_data_frame$ego
which(advice_data_frame$ego != friendship_data_frame$ego)
# Repeat for other variables
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
krack_full_data_frame <- data.frame(ego = advice_data_frame[,1],
alter = advice_data_frame[,2],
advice_tie = advice_data_frame[,3],
friendship_tie = friendship_data_frame[,3],
reports_to_tie = reports_to_data_frame[,3])
head(krack_full_data_frame)
krack_full_nonzero_edges <- subset(krack_full_data_frame,
(advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(krack_full_nonzero_edges)
krack_full <- graph.data.frame(krack_full_nonzero_edges)
summary(krack_full)
View(krack_full_nonzero_edges)
igraph::get.edge.attribute(krack_full, 'advice_tie')
View(krack_full_nonzero_edges)
krack_full_symmetrized <- as.undirected(krack_full, mode='collapse')
summary(krack_full_symmetrized)
for (i in V(krack_full)) {
for (j in names(attributes)) {
krack_full <- igraph::set.vertex.attribute(krack_full,
j,
index = i,
attributes[i + 1, j])
}
}
summary(krack_full)
View(attributes)
attributes = cbind(1:length(attributes[,1]), attributes)
View(attributes)
krack_full <- graph.data.frame(d = krack_full_nonzero_edges,
vertices = attributes)
summary(krack_full)
igraph::get.vertex.attribute(krack_full, 'AGE')
plot(krack_full)
plot(krack_full)
krack_advice_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "advice_tie") == 0])
summary(krack_advice_only)
plot(krack_advice_only)
krack_friendship_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "friendship_tie") == 0])
summary(krack_friendship_only)
plot(krack_friendship_only)
krack_reports_to_only <- igraph::delete.edges(krack_full,
E(krack_full)[igraph::get.edge.attribute(krack_full,
name = "reports_to_tie") == 0])
summary(krack_reports_to_only)
plot(krack_reports_to_only)
reports_to_layout <- layout.fruchterman.reingold(krack_reports_to_only)
plot(krack_reports_to_only,
layout=reports_to_layout)
dept_vertex_colors = igraph::get.vertex.attribute(krack_full,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5)
tenure_vertex_sizes = igraph::get.vertex.attribute(krack_full,"TENURE")
plot(krack_reports_to_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(krack_full)$color[ E(krack_full)$advice_tie==1 ] = tie_type_colors[1]
E(krack_full)$color[ E(krack_full)$friendship_tie==1 ] = tie_type_colors[2]
E(krack_full)$color[ E(krack_full)$reports_to_tie==1 ] = tie_type_colors[3]
E(krack_full)$arrow.size=.5
V(krack_full)$color = dept_vertex_colors
V(krack_full)$frame = dept_vertex_colors
plot(krack_full,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes)
legend(1,
1.25,
legend = c('Advice',
'Friendship',
'Reports To'),
col = tie_type_colors,
lty=1,
cex = .7)
plot(krack_friendship_only,
layout=reports_to_layout,
vertex.color=dept_vertex_colors,
vertex.label=NA,
edge.arrow.size=.5,
vertex.size=tenure_vertex_sizes,
main='Krackhardt High-Tech Managers')
write.graph(krack_full, file='krack_full.txt', format="edgelist")
# 利用高德地图API获取行政边界
if (!require('RCurl')) install.packages("RCurl")
if (!require('rjson')) install.packages("rjson")
if (!require('plyr')) install.packages("plyr")
if (!require('stringr')) install.packages("stringr")
if (!require('ggplot2')) install.packages("ggplot2")
# get data
url <- "http://restapi.amap.com/v3/config/district?key=88e5280248b518ac3f7eaec5d6f68183&keywords=原州区&level=city&subdistrict=3&extensions=all"
json <- getURL(url)
list <- fromJSON(json)
# 中心点
center<-list$districts[[1]]$center
cname<-list$districts[[1]]$name
cpoint <- as.numeric(unlist(str_split(center , ",")))
lon <-cpoint[1]
lat <-cpoint[2]
cpoint <- data.frame(lon = lon, lat = lat,cname= cname)
#下属区域
dist <- list$districts[[1]]$districts[[1]]$districts
dname<- sapply(dist, function(x)x[3])
dname<-unlist(dname)
dpoint <- sapply(dist, function(x)x[4])
dpoint <- str_split(dpoint , ",")
lon <- sapply(dpoint, function(x)x[1])
lat <- sapply(dpoint, function(x)x[2])
dpoint <- data.frame(lon = lon, lat = lat,dname= dname)
dpoint[, 1:2] <- sapply(dpoint[, 1:2], function(x)as.numeric(as.character(x)))
dpoint <- data.frame(lon = lon, lat = lat,dname= dname)
dpoint[, 1:2] <- sapply(dpoint[, 1:2], function(x)as.numeric(as.character(x)))
options(baidumap.key = '9c9978a893e2dd6c3be3d3241f8e8f61')
library(baidumap)
library(ggmap)
#  lizi https://github.com/dkahle/ggmap
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map)
lon
list
center<-list$districts[[1]]$center
center
cname
cpoint
lon
str(lon)
str(cpoint)
lon <-cpoint[[1]]
lon
lat <-cpoint[[2]]
cpoint <- data.frame(lon = lon, lat = lat,cname= cname)
dist <- list$districts[[1]]$districts[[1]]$districts
dname<- sapply(dist, function(x)x[3])
dname<-unlist(dname)
dpoint <- sapply(dist, function(x)x[4])
dpoint <- str_split(dpoint , ",")
lon <- sapply(dpoint, function(x)x[1])
lat <- sapply(dpoint, function(x)x[2])
dpoint <- data.frame(lon = lon, lat = lat,dname= dname)
dpoint[, 1:2] <- sapply(dpoint[, 1:2], function(x)as.numeric(as.character(x)))
dpoint
dist
list
